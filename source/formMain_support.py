#! /usr/bin/env python
#  -*- coding: utf-8 -*-
# ======================================================
#  Weather Now
#  Written by G.D. Walters
#  Last revision 28 July, 2019
# ======================================================
# Support module generated by PAGE version 4.24
#  in conjunction with Tcl version 8.6
#    Jul 20, 2019 10:53:45 AM CDT  platform: Linux
#    Jul 20, 2019 11:10:41 AM CDT  platform: Linux
#    Jul 20, 2019 11:11:34 AM CDT  platform: Linux
#    Jul 20, 2019 11:59:44 AM CDT  platform: Linux
#    Jul 22, 2019 06:47:15 AM CDT  platform: Linux
#    Jul 22, 2019 03:52:29 PM CDT  platform: Linux
#    Jul 28, 2019 03:47:19 PM CDT  platform: Linux
# ======================================================
# Version 0.2 (28 July, 2019)

import sys
import platform
import json
import os
from datetime import datetime
import webbrowser
# The next two packages might need to be installed by pip/pip3
from geopy.geocoders import Nominatim  # https://pypi.org/project/geopy/
import requests
# Included for future support of tooltips for the icons.
import formMain
import frmAlerts
import frmAlerts_support
from translate import translate
import config

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def set_Tk_var():
    global Title
    Title = tk.StringVar()
    global combobox
    combobox = tk.StringVar()
    global H1Temp
    H1Temp = tk.StringVar()
    global H1Hour
    H1Hour = tk.StringVar()
    global CurrentTemp
    CurrentTemp = tk.StringVar()
    global H2Temp
    H2Temp = tk.StringVar()
    global H3Temp
    H3Temp = tk.StringVar()
    global H4Temp
    H4Temp = tk.StringVar()
    global H5Temp
    H5Temp = tk.StringVar()
    global H2Hour
    H2Hour = tk.StringVar()
    global H3Hour
    H3Hour = tk.StringVar()
    global H4Hour
    H4Hour = tk.StringVar()
    global H5Hour
    H5Hour = tk.StringVar()
    # ---------------------------------
    global ComboLocations
    ComboLocations = tk.StringVar()
    global ComboLanguage
    ComboLanguage = tk.StringVar()
    global ComboUnits
    ComboUnits = tk.StringVar()
    # ---------------------------------
    global CurrentWind
    CurrentWind = tk.StringVar()
    global CurrentHumidity
    CurrentHumidity = tk.StringVar()
    global CurrentDewPoint
    CurrentDewPoint = tk.StringVar()
    global CurrentUVIndex
    CurrentUVIndex = tk.StringVar()
    CurrentUVIndex.set('11')
    global CurrentVisibility
    CurrentVisibility = tk.StringVar()
    global CurrentPressure
    CurrentPressure = tk.StringVar()
    global CurrentSummary
    CurrentSummary = tk.StringVar()
    global CurrentFeelsLike
    CurrentFeelsLike = tk.StringVar()
    global LowTemp
    LowTemp = tk.StringVar()
    global HighTemp
    HighTemp = tk.StringVar()
    global DataFrom
    DataFrom = tk.StringVar()
    global DTemp1
    DTemp1 = tk.StringVar()
    DTemp1.set('101/100')
    global DPrec1
    DPrec1 = tk.StringVar()
    DPrec1.set('101/100')
    global DDay1
    DDay1 = tk.StringVar()
    DDay1.set('101/100')
    global DTemp2
    DTemp2 = tk.StringVar()
    DTemp2.set('101/100')
    global DTemp3
    DTemp3 = tk.StringVar()
    DTemp3.set('101/100')
    global DTemp4
    DTemp4 = tk.StringVar()
    DTemp4.set('101/100')
    global DPrec2
    DPrec2 = tk.StringVar()
    DPrec2.set('101/100')
    global DPrec3
    DPrec3 = tk.StringVar()
    DPrec3.set('101/100')
    global DPrec4
    DPrec4 = tk.StringVar()
    DPrec4.set('101/100')
    global DDay2
    DDay2 = tk.StringVar()
    DDay2.set('101/100')
    global DDay3
    DDay3 = tk.StringVar()
    DDay3.set('101/100')
    global DDay4
    DDay4 = tk.StringVar()
    DDay4.set('101/100')


# ======================================================
# Callback for Language selection combo box
# NOTICE: This will make a web API call
# ======================================================
def on_cmboLanguageSelect(p1):

    global ComboUnits, ComboLangage
    global unitList, units, langlist, langs
    global unit, lang, uom
    global degree_sign, debug
    global curlat, curlon
    cs = ComboLanguage.get()
    cntr = 0
    for i in langlist:
        if i == cs:
            lang = langs[cntr]
            break
        else:
            cntr += 1
    fill_prompts(lang)
    ask_web(curlat, curlon)


# ======================================================
# Callback for Location Combo box
# NOTICE: This will make a web API call
# ======================================================
def on_cmboLocationSelect(p1):
    if debug == True:
        print('scrolltest_support.on_cmboLocationSelect')

    global ComboLocations
    global curlat, curlon, curCity
    cs = ComboLocations.get()
    isok, lat, lon = find_city(cs)
    curlat = lat
    curlon = lon
    if isok:
        Title.set("WeatherNow - {}".format(curCity))
        ask_web(lat, lon)


# ======================================================
# Callback for <ENTER> as a search for city.
# NOTICE: This will make a web API call
# ======================================================
def on_cmboLocationsKeyRelease(p1):
    if debug == True:
        print('scrolltest_support.on_cmboLocationsKeyRelease')

    global locs
    global curlat, curlon
    global ComboLocations
    if p1.keycode == 36:
        SearchText = (ComboLocations.get())
        if SearchText != "":
            city, lat, lon = get_latlon(SearchText)
            ask_web(lat, lon)
            curlat = lat
            curlon = lon
            if debug == True:
                print(curlat, curlon)
            add_loc(city, lat, lon)
            write_json_file(locs)
            fill_combo_locations()
            ComboLocations.set(city)


# ======================================================
# Check the locations data structure for city name and
# Returns: lat, lon and True or False depending on if city is found
# (Should always return True, unless city is blank)
# ======================================================
def find_city(city):
    global curCity
    found = False
    l1 = 0
    l2 = 0
    if city != "":
        for i in locs['locations']:
            if city == i['City']:
                found = True
                curCity = i['City']
                l1 = i['Lat']
                l2 = i['Lon']
                break
    else:
        print('You need to provide a city')
    return found, l1, l2


def on_alert_click(e):
    if debug == True:
        print('on_alert_click triggered')
        print('AlertActive: {0}'.format(config.alert_active))

    if config.alert_active == True:
        config.alert_data = config.response['alerts']
        HideMe()
        frmAlerts.create_FormAlerts(root)


def on_poweredLink_click(e):
    if debug == True:
        print('on_poweredLink_click')
    urlpowered = 'https://darksky.net/poweredby/'
    webbrowser.open(urlpowered, new=0, autoraise=True)


# ======================================================
# Callback for Unit combo box.
# ======================================================
def on_cmboUnitSelect(p1):
    if debug == True:
        print('scrolltest_support.on_cmboUnitSelect')

    global unitList, units, langlist, langs
    global gunit, lang, uom
    global curlat, curlon
    if debug == True:
        print(curlat, curlon)
    cs = ComboUnits.get()
    cntr = 0
    for i in unitList:
        if i == cs:
            gunit = units[cntr]
            break
        else:
            cntr += 1
    if debug == True:
        print("Current Units are now = {0}".format(gunit))
    uom = gunit
    if debug == True:
        print(curlat, curlon)
    ask_web(curlat, curlon)


# ======================================================
#
# ======================================================
def on_btnExit():
    kill_images()
    destroy_window()


def on_lblPushUp(e):
    global dblock
    if debug == True:
        print("lblPushUp")

        print("dblock = {0}".format(dblock))
    if dblock <= 3:
        dblock += 1
    if debug == True:
        print("dblock is now {0}".format(dblock))
    displayDaily()


def on_lblPushDown(e):

    global dblock
    if debug == True:
        print("lblPushDown")
        print("dblock = {0}".format(dblock))
    if dblock > 0:
        dblock -= 1
    if debug == True:
        print("dblock is now {0}".format(dblock))
    displayDaily()


# ======================================================
# For some reason, the images on the main form need to be
# set to None so there won't be any error messages upon exit
# ======================================================
def kill_images():
    global alerticon
    global imglist
    global CurImage
    alerticon = None
    for i in range(5):
        imglist[i] = None
    CurImage = None


# ======================================================
#
# ======================================================
def on_hourlyNext(e):
    if debug == True:
        print('formMain_support.on_btnNext')
    global hblock
    if hblock <= 4:
        hblock += 1
    else:
        hblock = 0
    displayHourly()


# ======================================================
#
# ======================================================
def on_hourlyPrev(e):
    if debug == True:
        print('formMain_support.on_btnPrev')
    global hblock
    if hblock > 0:
        hblock -= 1
    else:
        hblock = 0
    displayHourly()


# ======================================================
# Dark Sky Specific Code Starts Here
# ======================================================
def add_loc(c, lat, lon):
    global locs
    locs['locations'].append(({"City": c, "Lat": lat, "Lon": lon}))


def fill_form(response):
    global hdata, datasource, ddata
    hdata = response['hourly']['data']
    ddata = response['daily']['data']
    global hblock, dblock
    hblock = 0
    dblock = 0
    if datasource == 'Local':
        DataFrom.set('Data from {}'.  #
                     format(unix_time_to_human(
                            response['currently']['time'], "F")))
    else:
        DataFrom.set('')
    # Now build the output in pieces...
    displayCurrent()
    displayHourly()
    displayDaily()


def displayCurrent():
    global CurData, HourlyData, DayData, degree_sign, uom
    speed, distance, pressure, deg = get_uom(uom)
    if debug == True:
        print(speed, distance, pressure, deg)
    bearing = (CurData['windBearing'])
    dir = bearingToDirection(bearing)
    windSpeed = (str(round(CurData['windSpeed'])))
    windinfo = str(round(CurData['windSpeed'])) + " " + speed + " from " + dir
    CurrentWind.set(windinfo)
    CurrentHumidity.set(str(round(CurData['humidity'] * 100)) + '%')
    CurrentDewPoint.set(str(round(CurData['dewPoint'])) + degree_sign)
    uv = CurData['uvIndex']
    if uv < 3:
        bk = 'green2'
    elif (uv > 2) and (uv < 6):
        bk = 'yellow'
    elif (uv > 5) and (uv < 8):
        bk = 'orange'
    elif (uv > 7) and (uv < 11):
        bk = 'red'
    elif uv > 10:
        bk = 'purple'
    CurrentUVIndex.set(uv)
    w.Label18.configure(background=bk)
    w.Label18.configure(foreground="#000000")
    w.Label18.configure(anchor='center')
    CurrentVisibility.set(str(round(CurData['visibility'])) + " " + distance)
    CurrentPressure.set(str(round(CurData['pressure'])) + " " + pressure)
    # CurrentSummary.set(CurData['summary'])
    CurrentSummary.set(HourlyData['summary'])
    CurrentFeelsLike.set(str(round(CurData['apparentTemperature']))+degree_sign+" "+deg)

    icon = CurData['icon']
    ifile = path1 + "/icons/" + icon + "-55.png"
    global CurImage
    CurImage = tk.PhotoImage(file=ifile)
    w.lblCurrentIcon.configure(image=CurImage)
    CurrentTemp.set(str(round(CurData['temperature'])) + degree_sign + " " + deg)
    LowTemp.set(str(round(DayData['temperatureLow'])) + degree_sign)
    HighTemp.set(str(round(DayData['temperatureHigh'])) + degree_sign)


def displayDaily():
    global ddata, dblock, dayImgList
    dimg1=dimg2=dimg3=dimg4=None
    diconlist = [w.DIcon1, w.DIcon2, w.DIcon3, w.DIcon4]
    dtemplist = [DTemp1, DTemp2, DTemp3, DTemp4]
    dpreclist = [DPrec1, DPrec2, DPrec3, DPrec4]
    ddaylist = [DDay1, DDay2, DDay3, DDay4]
    dayImgList = [dimg1, dimg2, dimg3, dimg4]
    for i in range(0,4):
        indx = i+dblock
        hilow = "{0} / {1}".format(round(ddata[indx]['temperatureHigh']),round(ddata[indx]['temperatureLow']))
        dtemplist[i].set(hilow)
        if 'precipType' in ddata[indx]:
            precip = "{0}: {1}%".format(ddata[indx]['precipType'], round(ddata[indx]['precipProbability']*100))
        else:
            precip = "{}%".format(round(ddata[indx]['precipProbability'])*100)
        dpreclist[i].set(precip)
        day = unix_time_to_human(ddata[indx]['time'], "D")
        ddaylist[i].set(day)
        # Set icon
        icon = ddata[indx]['icon']
        ifile = path1 + "/icons/" + icon + "-55.png"
        dayImgList[i] = tk.PhotoImage(file=ifile)
        diconlist[i].configure(image=dayImgList[i])


def displayHourly():
    global hdata, hblock, hourlyWidgets, path1
    global degree_sign, imglist
    # Initialize the image variables and lists
    img1 = img2 = img3 = img4 = img5 = None
    hourlist = [H1Hour, H2Hour, H3Hour, H4Hour, H5Hour]
    templist = [H1Temp, H2Temp, H3Temp, H4Temp, H5Temp]
    imglist = [img1, img2, img3, img4, img5]
    tooltip_font = "-family {DejaVu Sans} -size 9"
    # Step through and process
    for i in range((hblock * 5), (hblock * 5) + 5):
        # Pull the proper data
        tim = unix_time_to_human(hdata[i]['time'], "H")
        tmp = str(round(hdata[i]['temperature'])) + degree_sign
        icon = hdata[i]['icon']
        # Creat the icon filename with path
        ifile = path1 + "/icons/" + icon + "-55.png"
        # Make an index value
        indx = i - (hblock*5)
        # Load the data into the widgets
        imglist[indx] = tk.PhotoImage(file=ifile)
        hourlyWidgets[indx].configure(image=imglist[indx])
        hourlist[indx].set(tim)
        templist[indx].set(tmp)
        # formMain.ToolTip(hourlyWidgets[indx], tooltip_font, icon, delay=0.5)


def bearingToDirection(bearing):
    # To Do - check values
    if (bearing <= 12):
        d = "N"
    elif (bearing >= 12) and (bearing <= 33):  # 22.5
        d = "NNE"
    elif (bearing >= 34) and (bearing <= 56):  # 45
        d = "NE"
    elif (bearing >= 57) and (bearing <= 79):  # 67.5
        d = "ENE"
    elif (bearing >= 80) and (bearing <= 101):  # 90
        d = "E"
    elif (bearing >= 102) and (bearing <= 123):  # 112.5
        d = "ESE"
    elif (bearing >= 124) and (bearing <= 145):
        d = "SE"
    elif (bearing >= 146) and (bearing <= 168):
        d = "SSE"
    elif (bearing >= 169) and (bearing <= 191):
        d = "S"
    elif (bearing >= 192) and (bearing <= 213):
        d = "SSW"
    elif (bearing >= 214) and (bearing <= 236):
        d = "SW"
    elif (bearing >= 237) and (bearing <= 258):
        d = "WSW"
    elif (bearing >= 259) and (bearing <= 281):
        d = "W"
    elif (bearing >= 282) and (bearing <= 301):
        d = "WNW"
    elif (bearing >= 302) and (bearing <= 326):
        d = "NW"
    elif (bearing >= 327) and (bearing <= 348):
        d = "NNW"
    elif (bearing > 349):
        d = "N"
    else:
        d = "?"
    return d


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    # ======================================================
    # My init code starts here
    # ======================================================
    pv = platform.python_version()
    print("Running under Python {0}".format(pv))
    # Set the path for the icon files
    global debug
    debug = False
    global path1
    path1 = os.getcwd()
    print(path1)
    imgpath = path1 + "/icons/"
    global version
    version = 0.2
    print("Version: {}".format(version))

    # Load the locations from the config file...
    global iniFilename
    iniFilename = 'locations.json'
    global locs
    locs = read_config()
    # Some more globals, titlebar simulation stuff and bindings
    global swidth, sheight
    swidth = 846
    sheight = 598
    global degree_sign
    degree_sign = u'\N{DEGREE SIGN}'
    global titlebar, titlebarLbl
    titlebar = w.frameTitlebar
    titlebarLbl = w.lblTitleBar
    titlebar.bind('<B1-Motion>', move_window)
    titlebar.bind('<Button-1>', get_pos)
    titlebarLbl.bind('<B1-Motion>', move_window)
    titlebarLbl.bind('<Button-1>', get_pos)
    # root.overrideredirect(True)  # turns off title bar, geometry
    # GDW 7/23/19 chose to not use root.overridedirect, but to use the
    # following three wm_attributes calls instead.
    root.wm_attributes('-topmost', 0)
    root.wm_attributes('-fullscreen', False)
    root.wm_attributes('-type', 'splash')   # Using 'splash' allows other programs to be on top of this one.
    # root.wm_attributes('-type', 'normal')
    # root.iconbitmap('@' + "AppIcon.gif")
    # I might need to rethink the size of the app.  Does the width/height
    # include the "removed" title bar?
    centre_screen(swidth, sheight)
    w.Label10.bind('<Button-1>', lambda e: on_hourlyNext(e))
    w.Label10_9.bind('<Button-1>', lambda e: on_hourlyPrev(e))
    Title.set("WeatherNow - San Marcos, Tx")
    w.lblPoweredLink.bind('<Button-1>', on_poweredLink_click)
    global lblAlert
    lblAlert = w.lblAlertIcon
    lblAlert.configure(text='')
    # For some reason, Page doesn't give 'trek' as a cursor option...
    w.lblPoweredLink.configure(cursor="trek")
    w.lblAlertIcon.configure(cursor="trek")

    widgets_to_list()
    more_globals()      # To keep size of init smaller.

    global hourblock
    hourblock = 0
    global dblock
    dblock = 0
    # Finally, get the weather data to put into the UI.
    #    Note, ask_web() makes an API call, load_local() reads last visited
    #    location data from the saved data file.
    # load_local()
    ask_web()


def more_globals():
    global curlat, curlon
    global comboboxLocations
    global comboboxUnits, comboboxLangs
    global gunit, lang
    comboboxLocations = w.TCombobox1
    comboboxUnits = w.TCombobox3
    comboboxLangs = w.TCombobox2
    # Add the bindings for the combo boxes
    comboboxLocations.bind('<<ComboboxSelected>>',
                           lambda e: on_cmboLocationSelect(e))
    comboboxLocations.bind('<KeyRelease>',
                           lambda e: on_cmboLocationsKeyRelease(e))
    comboboxUnits.bind('<<ComboboxSelected>>',
                       lambda e: on_cmboUnitSelect(e))
    comboboxLangs.bind('<<ComboboxSelected>>',
                       lambda e: on_cmboLanguageSelect(e))
    w.lblPushDown.bind('<Button-1>', on_lblPushDown)
    w.lblPushUp.bind('<Button-1>', on_lblPushUp)
    # Fill the Locations Combobox
    fill_combo_locations()
    load_lang_units()
    global uom
    uom = "us"
    global usub
    usub = create_unit_subs()
    uom = gunit
    # speed, distance, pressure, deg = get_uom(gunit)
    speed, distance, pressure, deg = get_uom(uom)
    if debug == True:
        print(deg, speed, distance, pressure)
    global languages
    languages = read_lang_file()
    fill_prompts('en')
    w.lblAlertIcon.bind('<Button-1>', lambda e: on_alert_click(e))
    flatten_widgets()


def widgets_to_list():
    global hourlyWidgets  # , dailyWidgets, hourImages, dayImages
    # global hourImages, dayImages
    # These are the actual label widgets that will hold the graphics
    hourlyWidgets = [w.Label5, w.Label6, w.Label7, w.Label8, w.Label9]


def centre_screen(wid, h):
    ws = root.winfo_screenwidth()
    hs = root.winfo_screenheight()
    x = (ws/2) - (wid/2)
    y = (hs/2) - (h/2)
    root.geometry('%dx%d+%d+%d' % (wid, h, x, y))


def load_local():
    global response
    global datasource
    config.local_data = True
    datasource = 'Local'
    localfile = 'data2.json'
    with open(localfile) as f:
        response = json.load(f)
    global CurData, DayData
    CurData = response['currently']
    DayData = response['daily']['data'][0]
    # print(DayData)
    if 'alerts' in response:
        # print('Alert')
        config.alert_active = True
        alertinfo = response['alerts']
        # print(alertinfo)
        config.alertdata = alertinfo
        set_alert(True)
    else:
        config.alert_active = False
        set_alert(False)
    config.response = response
    fill_form(response)


# ======================================================
# Creates a URL string for an API call to DarkSky.net
# Params: Lat and Lon (both optional)
# Creates a 'response' object, fills the canvas and
# writes a datafile for possible future use.
# ======================================================
def ask_web(lat=0, lon=0):
    global curlat, curlon
    global datasource
    config.local_data = False
    datasource = 'Web'
    host = 'https://api.darksky.net/forecast'
    api_key = 'enter your api key here'
    # San Marcos Lat/Lon
    if lat == 0:
        lat = 29.848893  # 29.8820
        lon = -97.953522  # 97.939987
    curlat = lat
    curlon = lon
    # excludes = 'exclude=flags'
    excludes = "exclude=flags"
    unittouse = 'units={0}'.format(gunit)
    langtouse = 'lang={0}'.format(lang)
    # url = ('{host}/{api_key}/{lat},{lon}?{excludes}'.  # &{unit}&{lang}'.
    url = ('{host}/{api_key}/{lat},{lon}?{excludes}&{unit}&{lang}'.
           format(host=host,
                  api_key=api_key,
                  lat=lat,
                  lon=lon,
                  excludes=excludes,
                  unit=unittouse,
                  lang=langtouse))

    # print(url)
    # Now start a session using requests and send a .get to obtain the response
    session = requests.Session()
    response = session.get(url).json()
    global CurData, DayData, HourlyData
    CurData = response['currently']
    DayData = response['daily']['data'][0]
    HourlyData = response['hourly']
    if 'alerts' in response:
        set_alert(True)
        config.alert_active = True
    else:
        set_alert(False)
        config.alert_active = False
    # print(DayData)
    config.response = response
    fill_form(response)
    write_json_datafile(response)


def set_alert(status):
    global alerticon
    if status == True:
        ifile = path1+"/icons/alert-55.png"
        alerticon = tk.PhotoImage(file=ifile)
        w.lblAlertIcon.configure(image=alerticon)
        w.lblAlertIcon.configure(state='normal')
        w.lblAlertIcon.configure(cursor='trek')
    else:
        w.lblAlertIcon.configure(state=tk.DISABLED)
        w.lblAlertIcon.configure(image='')
        w.lblAlertIcon.configure(cursor='arrow')


# ======================================================
# Write the API data to a JSON data file.  Allows use of local file for
# development and troubleshooting.
# ======================================================
def write_json_datafile(data):
    with open('data2.json', 'w') as outfile:
        json.dump(data, outfile)


# ======================================================
# This function converts unix time to American Time/Date format.
# Feel free to change the conversion string to your local format.
# ======================================================
def unix_time_to_human(tim, fmt="F"):
    d = ''
    if fmt == "F":
        d = datetime.fromtimestamp(tim).strftime("%a %m/%d/%Y %H:%M:%S")
    elif fmt == "H":
        d = datetime.fromtimestamp(tim).strftime("%-I %p")
    elif fmt == "W":
        d = datetime.fromtimestamp(tim).strftime("%-a")
    elif fmt == "D":
        d = datetime.fromtimestamp(tim).strftime("%a")
    return d


# ======================================================
# Create the units dictionaries.
# ======================================================
def create_unit_subs():
    usub = {}
    usub['units'] = []
    usub['units'].append({'area': 'us', 'speed': 'mph',
                          'distance': 'mi', 'pressure': 'mb', 'deg': 'F'})
    usub['units'].append({'area': 'si', 'speed': 'm/s',
                          'distance': 'km', 'pressure': 'hPa', 'deg': 'C'})
    usub['units'].append({'area': 'ca', 'speed': 'kph',
                          'distance': 'km', 'pressure': 'hPa', 'deg': 'C'})
    usub['units'].append({'area': 'uk2', 'speed': 'mph',
                          'distance': 'mi', 'pressure': 'hPa', 'deg': 'C'})
    return usub


def get_uom(uom):
    global usub
    global deg, speed, distance, pressure
    u = usub['units']
    for i in u:
        if i['area'] == uom:
            speed = i['speed']
            distance = i['distance']
            pressure = i['pressure']
            deg = i['deg']
            break
    # print(speed, distance, pressure)
    return speed, distance, pressure, deg


# ======================================================
# Create and load the language and unit options into
# the combo boxes.
# ======================================================
def load_lang_units():
    global comboboxUnits, comboboxLangs
    global unitList, units, langlist, langs
    global degree_sign
    ds = degree_sign
    unitList = ['{0}F, mph'.format(ds),
                '{0}C, m/s'.format(ds),
                '{0}C, km/h'.format(ds),
                '{0}C, mph'.format(ds)]
    units = ['us', 'si', 'ca', 'uk2']
    # langlist = ['English', 'Norwegian', 'Swedish', 'Dutch', 'Cornish', 'French',
    #             'Hebrew', 'Finish', 'Spanish', 'German', 'Danish']
    # langs = ['en', 'nb', 'sv', 'nl', 'kw', 'fr', 'he', 'fi', 'es', 'de', 'da']
    langlist = ['English', 'Norwegian', 'Swedish', 'Dutch', 'French',
                'Finish', 'Spanish', 'German', 'Danish']
    langs = ['en', 'nb', 'sv', 'nl', 'fr', 'fi', 'es', 'de', 'da']
    comboboxUnits['values'] = unitList
    comboboxUnits.set(unitList[0])
    comboboxLangs['values'] = langlist
    comboboxLangs.set(langlist[0])
    global gunit, lang
    gunit = "us"
    lang = "en"


# ======================================================
# Fills the locations combo box
# ======================================================
def fill_combo_locations():
    global locs, comboboxLocations
    lst = []
    for i in locs['locations']:
        lst.append(i['City'])
    comboboxLocations['values'] = lst
    comboboxLocations.set(lst[0])


# ======================================================
# Read the config file, if it exists, and get a list
# of locations.
# ======================================================
def read_config():
    global iniFilename
    if os.path.isfile(iniFilename):
        with open(iniFilename, 'r') as f:
            locs = json.load(f)
    else:
        locs = createobj()
        write_config(locs)
    return locs


# ======================================================
# function read_lang_file()
# ------------------------------------------------------
# Used to load the language file created by trans2obj.py
# ======================================================
def read_lang_file():
    with open("langfile.json", 'r') as f:
        langs = json.load(f)
    return langs


# ======================================================
# Write the config file
# ======================================================
def write_config(obj):
    global iniFilename
    with open(iniFilename, 'w') as outfile:
        json.dump(obj, outfile)


# ======================================================
# If the config file doesn't exist, create a JSON object
# to make a default one.
# ======================================================
def createobj():
    data = {}
    data['locations'] = []
    data['locations'].append({
        "City": "San Marcos, Tx",
        "Lat": 29.888868,
        "Lon": -97.958316
        })
    data['locations'].append({
        "City": "Oslo, 0026, Norge",
        "Lat": 59.9133301,
        "Lon": 10.7389701
    })
    data['locations'].append({
        "City": "Point Arena, Ca",
        "Lat": 38.9088,
        "Lon": -123.6931,
    })
    # print(data, type(data))
    return(data)


def fill_combo():
    global locs, cmbo
    lst = []
    for i in locs['locations']:
        lst.append(i['City'])
    cmboboxLocations['values'] = lst
    cmboboxLocations.set(lst[0])


# ======================================================
# function get_latlon()
# ------------------------------------------------------
# Makes an API call to OpenStreetMap.org to determine
# Lat and lon from a city name or street address.
# Params: City name or street address.
# Returns: City name, lat and lon.
# ======================================================
def get_latlon(city):
    global curlat, curlon
    geolocator = Nominatim(user_agent='openstreetmap.org')
    locator = geolocator.geocode(city)
    expandedcity = locator
    c = locator.address
    lat = locator.latitude
    lon = locator.longitude
    # print(curlat, curlon)
    return c, lat, lon


# ======================================================
# Write the configuration file.
# ======================================================
def write_json_file(data):
    global iniFilename
    with open(iniFilename, 'w') as outfile:
        json.dump(data, outfile)


# ======================================================
# The next two functions allow for movement of the form
# ======================================================
def get_pos(event):
    global xwin, ywin
    xwin = root.winfo_x()
    ywin = root.winfo_y()
    startx = event.x_root
    starty = event.y_root
    ywin = ywin - starty
    xwin = xwin - startx


def move_window(event):
    global xwin, ywin, swidth, sheight

    geo = "{0}x{1}".format(swidth, sheight)
    root.geometry(geo + '+{0}+{1}'.format(event.x_root + xwin,
                                          event.y_root + ywin))


# ======================================================
# Translation functions
# ======================================================
def fill_prompts(toLang):
    global languages
    global lang
    promptwidgets = [w.lblWindPrompt, w.lblHumidityPrompt, w.lblDewPointPrompt, w.lblUVIndexPrompt,
                     w.lblVisibilityPrompt, w.lblPressurePrompt, w.Label3, w.Label21_2, w.Label23, w.Label1, w.Label1_1,
                     w.Label1_2, w.lblHourlyBlock, w.lblDailyBlock]
    langdata = languages['languages']

    data = None
    for i in langdata:
        if i['lang'] == toLang:
            # print('Fount it')
            data = i['prompts']
            break
    # print(data)
    # print(len(data))
    for cnt in range(len(promptwidgets)):
        promptwidgets[cnt].config(text=data[cnt])
    # print('done')


def flatten_widgets():
    w.Label1.configure(relief='flat')
    w.Label2.configure(relief='flat')
    w.lblCurrentIcon.configure(relief='flat')
    w.DIcon1.configure(relief='flat')
    w.Label5.configure(relief='flat')
    w.Label6.configure(relief='flat')
    w.Label7.configure(relief='flat')
    w.Label8.configure(relief='flat')
    w.Label9.configure(relief='flat')
    w.Label10.configure(relief='flat')
    w.lblH1Temp.configure(relief='flat')
    w.lblH1Hour.configure(relief='flat')
    w.lblH1Temp_1.configure(relief='flat')
    w.lblH1Temp_2.configure(relief='flat')
    w.lblH1Temp_3.configure(relief='flat')
    w.lblH1Temp_4.configure(relief='flat')
    w.lblH1Hour_5.configure(relief='flat')
    w.lblH1Hour_6.configure(relief='flat')
    w.lblH1Hour_7.configure(relief='flat')
    w.lblH1Hour_8.configure(relief='flat')
    w.Label10_9.configure(relief='flat')
    w.lblWindPrompt.configure(relief='flat')
    w.lblHumidityPrompt.configure(relief='flat')
    w.lblDewPointPrompt.configure(relief='flat')
    w.lblUVIndexPrompt.configure(relief='flat')
    w.lblVisibilityPrompt.configure(relief='flat')
    w.lblPressurePrompt.configure(relief='flat')
    w.lblWind.configure(relief='flat')
    w.Label16.configure(relief='flat')
    w.Label17.configure(relief='flat')
    w.Label18.configure(relief='flat')
    w.Label19.configure(relief='flat')
    w.Label20.configure(relief='flat')
    w.Label1_1.configure(relief='flat')
    w.Label1_2.configure(relief='flat')
    w.lblSummary.configure(relief='flat')
    w.Label3.configure(relief='flat')
    w.Label21.configure(relief='flat')
    w.Label21_2.configure(relief='flat')
    w.Label22.configure(relief='flat')
    w.Label23.configure(relief='flat')
    w.Label24.configure(relief='flat')
    w.lblDataFrom.configure(relief='flat')
    w.lblAlertIcon.configure(relief='flat')
    w.lblHourlyBlock.configure(relief='flat')
    w.lblDailyBlock.configure(relief='flat')
    w.lblPoweredLink.configure(relief='flat')
    w.lblPushDown.configure(relief='flat')
    w.lblPushUp.configure(relief='flat')
    w.lblDT1.configure(relief='flat')
    w.lblDP1.configure(relief='flat')
    w.lblDD1.configure(relief='flat')
    w.DIcon2.configure(relief='flat')
    w.DIcon3.configure(relief='flat')
    w.DIcon4.configure(relief='flat')
    w.lblDT2.configure(relief='flat')
    w.lblDT3.configure(relief='flat')
    w.lblDT4.configure(relief='flat')
    w.lblDP2.configure(relief='flat')
    w.lblDP3.configure(relief='flat')
    w.lblDP4.configure(relief='flat')
    w.lblDD2.configure(relief='flat')
    w.lblDD3.configure(relief='flat')
    w.lblDD4.configure(relief='flat')


def ShowMe():
    root.deiconify()
    root.attributes("-topmost", True)


def HideMe():
    root.withdraw()


# ======================================================
# End of my code
# ======================================================
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import formMain
    formMain.vp_start_gui()
