#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.24
#  in conjunction with Tcl version 8.6
#    Jul 26, 2019 03:56:02 PM CDT  platform: Linux
#    Jul 26, 2019 07:01:37 PM CDT  platform: Linux
#    Jul 26, 2019 07:11:10 PM CDT  platform: Linux
#    Jul 27, 2019 03:40:06 AM CDT  platform: Linux

import sys
import platform
import json
import config
import os
from datetime import datetime
import webbrowser
import formMain
import formMain_support

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global AlertCount
    AlertCount = tk.StringVar()
    global Title
    Title = tk.StringVar()
    global Severity
    Severity = tk.StringVar()
    global Regions
    Regions = tk.StringVar()
    global Times
    Times = tk.StringVar()
    global URL
    URL = tk.StringVar()

def on_btnMinimize():
    print('frmAlerts_support.on_btnMinimize')
    sys.stdout.flush()
    HideMe()

def on_urlClick(p):
    print('frmAlerts_support.on_urlClick')
    # sys.stdout.flush()
    global alerturl
    webbrowser.open(alerturl, new=0, autoraise=True)

def on_btnExit():
    # print('frmAlerts_support.on_btnExit')
    # sys.stdout.flush()
    # destroy_window()
    formMain_support.ShowMe()
    HideMe()

def on_btnNext():
    # print('frmAlerts_support.on_btnNext')
    # sys.stdout.flush()
    info = config.alert_data
    print(config.alert_loop_count)
    print("LoopCount = {0}  NumberAlerts = {1}".format(config.alert_loop_count, config.number_of_alerts))
    if config.alert_loop_count + 1 < config.number_of_alerts:
        config.alert_loop_count += 1
        this_alert = info[config.alert_loop_count]
        fill_form(this_alert, config.alert_loop_count)

def on_btnPrevious():
    # print('frmAlerts_support.on_btnPrevious')
    # sys.stdout.flush()
    info = config.alert_data
    if config.alert_loop_count > 0:
        config.alert_loop_count -= 1
        this_alert = info[config.alert_loop_count]
        fill_form(this_alert, config.alert_loop_count)

def fill_form(data, which):
    alerttype = data['title']
    clear_form()
    alertCountText = "Showing Alert #{0} of {1}".format(config.alert_loop_count+1,config.number_of_alerts)
    AlertCount.set(alertCountText)
    Severity.set(data['title'])
    counties = []
    for r in data['regions']:
        counties.append(r)
    clist = ", ".join(counties)
    txt = "This alert is in effect for the following counties: {0}".format(clist)
    Regions.set(txt)
    starttime = unix_time_to_human(data['time'], 'F')
    endtime = unix_time_to_human(data['expires'], 'F')
    timetext = ' Effective from {0} until {1}'.format(starttime, endtime)
    Times.set(timetext)
    w.Scrolledtext1.insert('end', data['description'])
    global alerturl
    alerturl = data['uri']
    URL.set('Click here to see the full alert information')

def clear_form():
    AlertCount.set('')
    Severity.set('')
    Regions.set('')
    URL.set('')
    w.Scrolledtext1.delete('1.0','end')

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    # ======================================================
    # My init code begins here
    # ======================================================
    global swidth, sheight
    swidth = 780
    sheight = 625
    global titlebar, titlebarLbl
    titlebar = w.frmTitleBar
    titlebarLbl = w.lblTitle
    titlebar.bind('<B1-Motion>', move_window)
    titlebar.bind('<Button-1>', get_pos)
    titlebarLbl.bind('<B1-Motion>', move_window)
    titlebarLbl.bind('<Button-1>', get_pos)
    root.wm_attributes('-topmost', False)
    root.wm_attributes('-fullscreen', False)
    root.wm_attributes('-type', 'splash')
    centre_screen(swidth, sheight)
    Title.set('Weather Advisory for this area.')
    # root.tk.call('wm', 'iconphoto', root._w, tk.PhotoImage(file='AppIcon.png'))
    w.lblUrl.bind('<Button-1>', on_urlClick)
    w.lblUrl.configure(cursor="trek")
    # local_data = True
    clear_form()
    w.btnMinimize.configure(state='disabled')
    # local_data = False
    if config.local_data == True:
        response = read_test()
        config.alert_data = response['alerts']
        config.number_of_alerts = len(response['alerts'])
        config.alert_loop_count = 0
        # print("LEN = {0}".format(len(response['alerts'])))
        this_alert = response['alerts'][0]
        Title.set(this_alert['title'])
        if config.number_of_alerts > 1:
            alert_count_text = "There are {0} alerts for this area".format(config.number_of_alerts)
        else:
            alert_count_text = "There is {0} alert for this area".format(config.number_of_alerts)
            w.btnPrevious.configure(state='disabled')
            w.btnNext.configure(state='disabled')
        AlertCount.set(alert_count_text)
        fill_form(this_alert,0)
    # this_alert = config.alert_data
    config.alert_data = config.response['alerts']
    config.number_of_alerts = len(config.response['alerts'])
    config.alert_loop_count = 0
    this_alert = config.response['alerts'][0]
    print("AlertData = {0}".format(this_alert))
    print("Number of alerts = {0}".format(len(config.alert_data)))
    fill_form(this_alert, 0)

# ======================================================
# Read the config file, if it exists, and get a list
# of locations.
# ======================================================
def read_test():
    # with open('data2_26July2019Alert.json', 'r') as f:
    with open('oslo with alerts.json', 'r') as f:
        response = json.load(f)
    return response

def centre_screen(wid, h):
    ws = root.winfo_screenwidth()
    hs = root.winfo_screenheight()
    x = (ws/2) - (wid/2)
    y = (hs/2) - (h/2)
    root.geometry('%dx%d+%d+%d' % (wid, h, x, y))

# ======================================================
# This function converts unix time to American Time/Date format.
# Feel free to change the conversion string to your local format.
# ======================================================
def unix_time_to_human(tim, fmt="F"):
    d = ''
    if fmt == "F":
        d = datetime.fromtimestamp(tim).strftime("%a %m/%d/%Y %H:%M:%S")
    elif fmt == "H":
        d = datetime.fromtimestamp(tim).strftime("%-I %p")
    elif fmt == "W":
        d = datetime.fromtimestamp(tim).strftime("%-a")
    return d

# ======================================================
# The next two functions allow for movement of the form
# ======================================================
def get_pos(event):
    global xwin, ywin
    xwin = root.winfo_x()
    ywin = root.winfo_y()
    startx = event.x_root
    starty = event.y_root
    ywin = ywin - starty
    xwin = xwin - startx

def move_window(event):
    global xwin, ywin, swidth, sheight

    geo = "{0}x{1}".format(swidth, sheight)
    root.geometry(geo + '+{0}+{1}'.format(event.x_root + xwin,
                                          event.y_root + ywin))

def ShowMe():
    root.deiconify()
    root.attributes("-topmost", True)

def HideMe():
    root.withdraw()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import frmAlerts
    frmAlerts.vp_start_gui()





